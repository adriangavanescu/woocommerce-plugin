name: Trigger tests 1

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [master]
    types: [opened, synchronize]

env:
  GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

jobs:
  trigger_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Trigger tests repo
        uses: peter-evans/repository-dispatch@v1
        with:
          token: "${{ secrets.PAT_TOKEN }}"
          repository: adriangavanescu/wordpress-automation
          event-type: trigger-tests

  wait_for_success_confirmation:
    runs-on: ubuntu-latest
    steps:
      - name: Wait for tests
        id: wait-for-event
        uses: actions/github-script@v6
        with:
          script: |
            const maxRetries = 60; // Wait for up to 10 minutes (10s x 60 retries)
            const interval = 10000; // 10 seconds
            const eventType = "success-event"; // Event type to wait for
            const payload = "desired-payload"; // Expected payload (optional)
            
            let retries = 0;
            let eventReceived = false;
            
            while (!eventReceived && retries < maxRetries) {
              console.log(`Checking for event: ${eventType}, retry ${retries + 1}/${maxRetries}`);
            
              const response = await fetch(`https://api.github.com/repos/adriangavanescu/woocommerce-plugin/events`, {
                headers: {
                  'Authorization': `Bearer ${process.env.GITHUB_TOKEN}`,
                  'Accept': 'application/vnd.github.v3+json'
                }
              });
            
              if (!response.ok) {
                throw new Error(`Failed to fetch events: ${response.statusText}`);
              }
            
              const events = await response.json();
              for (const event of events) {
                if (event.type === 'RepositoryDispatchEvent' &&
                    event.payload.action === eventType &&
                    (!payload || event.payload.client_payload === payload)) {
                  eventReceived = true;
                  console.log("Event received!");
                  break;
                }
              }
            
              if (!eventReceived) {
                await new Promise((resolve) => setTimeout(resolve, interval));
              }
            
              retries++;
            }
            
            if (!eventReceived) {
              core.setFailed("Timed out waiting for the event.");
            }